window.addEventListener('load', initUI);



function initUI() {
  const DOMPreloader = id('preloader');
  DOMPreloader.classList.add('hide');

  const DOMMenu = id('ui-menu');

  DOMMenu.addEventListener('click', function (e) {
    let target = e.target;
    if (target.tagName === 'BUTTON' && target.className.match('ui-menu__button')) {
      let dropDownContent = e.target.nextElementSibling;
      dropDownContent && dropDownContent.classList.toggle('show');
    }
  });

}


function exportHTML(name, export_vert, export_frag) {
  let htmlString = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>ShaderExpo Export Template</title>
</head>

<body>
  <canvas id='c'></canvas>

  <!-- Dependencies -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
  <script src="https://anuraghazra.github.io/ShaderExpo/js/helpers.js"></script>
  <script src="https://anuraghazra.github.io/ShaderExpo/js/utils.js"></script>
  <script src="https://anuraghazra.github.io/ShaderExpo/js/Camera.js"></script>
  <script src="https://anuraghazra.github.io/ShaderExpo/js/Shader.js"></script>
  <script src="https://anuraghazra.github.io/ShaderExpo/js/RawModel.js"></script>
  <script src="https://anuraghazra.github.io/ShaderExpo/js/Mesh.js"></script>


  <script>
    /**
     * @Author <https://github.com/anuraghazra>
     * This file is automatically generated. 
     * if you have any issues please contact at
     * <https://github.com/anuraghazra/ShaderExpo>
     */
    window.onload = function () {
      // Shader Code
      const vertexShaderValue = \`${export_vert}\`;
      const fragmentShaderValue = \`${export_frag}\`;

      // init gl
      const glcanvas = document.getElementById('c');
      const gl = glcanvas.getContext('webgl');
      const width = window.innerWidth;
      const height = window.innerHeight;
      glcanvas.width = width;
      glcanvas.height = height;

      let image = loadImage('https://anuraghazra.github.io/ShaderExpo/assets/textures/wood.jpg', main);

      // Main Run
      function main() {

        // GL CLEAR -----------
        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.clear(gl.COLOR_BUFFER_BIT);
        gl.enable(gl.DEPTH_TEST);
        gl.depthFunc(gl.LEQUAL);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);


        // INTIALIZE VARIABLES
        let timeStart = Date.now() / 1000.0; // time
        let aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;
        let camera = new Camera([0, 0, -8], aspect);


        // init texture
        let texture = gl.createTexture();
        renderTexture(gl, texture, image);

        // init mesh
        let mesh = new Mesh(gl);
        mesh.initBuffers();

        // init shader
        let shader = new Shader(gl);

        // init matrices
        let worldMatrix = mat4.create();
        let viewMatrix = mat4.create();
        let projMatrix = mat4.create();
        function setMatrices() {
          gl.uniformMatrix4fv(shader.uniforms.uWorldMatrix, false, worldMatrix);
          gl.uniformMatrix4fv(shader.uniforms.uViewMatrix, false, viewMatrix);
          gl.uniformMatrix4fv(shader.uniforms.uProjMatrix, false, projMatrix);
        }


        function compile() {
          // create, compile, check shaders
          shader.setShaders(vertexShaderValue, fragmentShaderValue);
          shader.init();
          if (shader.isVertexShaderError || shader.isFragmentShaderError) {
            return false;
          };

          shader.getShaderVariables();
          gl.useProgram(shader.program);

          // bind buffer
          mesh.enableAttribs(shader.attribs.aVertexPos, shader.attribs.aNormal, shader.attribs.aTexCoord);
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mesh.buffers.indices);

          // init and set matrices
          camera.lookAt(viewMatrix).perspective(projMatrix);

          gl.uniform2fv(shader.uniforms.resolution, [gl.canvas.width, gl.canvas.height]);
        }

        compile();
        animate();
        function animate() {
          gl.clearColor(0, 0, 0, 1.0);
          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

          // camera position
          gl.uniform3fv(shader.uniforms.viewPos, camera.position);
          gl.uniform1f(shader.uniforms.uTime, (Date.now() / 1000.0) - timeStart);

          // mat4.identity(worldMatrix);
          mat4.rotate(worldMatrix, worldMatrix, 0.01, [0, 1, 0]);
          mat4.rotate(worldMatrix, worldMatrix, 0.01, [-1, 0, 0]);

          // init and set matrices
          setMatrices();
          gl.drawElements(gl.TRIANGLES, mesh.indicesCount, gl.UNSIGNED_SHORT, 0);
          requestAnimationFrame(animate);
        }
      }
    }
  </script>
</body>
</html>
`;

  function download(filename, text) {
    var pom = document.createElement('a');
    pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
    pom.setAttribute('download', filename);

    if (document.createEvent) {
      var event = document.createEvent('MouseEvents');
      event.initEvent('click', true, true);
      pom.dispatchEvent(event);
    }
    else {
      pom.click();
    }
  }
  download(name + '.html', htmlString);
}


